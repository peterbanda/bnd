package com.bnd.core.reflection;

import static org.junit.Assert.*;

import com.bnd.core.reflection.ReflectionProvider;
import org.apache.commons.lang.StringUtils;
import org.junit.Test;

import com.bnd.core.domain.um.User;

/**
 * @author Â© Peter Banda
 * @since 2012
 */
public class ReflectionProviderTest  {

	private static double[] MATRIX = new double[] {
		0,50.1035714285714,27.6469479765413,
		1,50.1464285714286,27.7134875819707,
		2,50.1828571428571,27.8341321812934,
		3,49.8735714285714,27.7420121856705,
		4,50.215,27.8115265948934,
		5,50.0535714285714,27.712650986964,
		6,49.795,27.7610794929769,
		7,49.8728571428571,27.7495473084549,
		8,49.7592857142857,27.7739599858699,
		9,50.0428571428571,27.8703692748497,
		10,50.1485714285714,27.7852614104736,
		11,49.8078571428571,27.7227751909096,
		12,50.2114285714286,27.8066048759153,
		13,50.3764285714286,27.7416506100742,
		14,50.0935714285714,27.66123964271,
		15,50.0414285714286,27.435387832041,
		16,50.2592857142857,27.3177816038975,
		17,50.6528571428571,27.1019807475314,
		18,50.9785714285714,26.4998327591654,
		19,51.3392857142857,25.98009399648,
		20,52.3542857142857,25.094984394461,
		21,53.1578571428571,23.8683263499403,
		22,54.4785714285714,22.6423289292568,
		23,55.7671428571429,21.5257636078514,
		24,57.1564285714286,20.2070009220502,
		25,58.98,18.7552437795612,
		26,60.5828571428572,17.4414428781087,
		27,62.4457142857143,16.1597447210824,
		28,64.235,14.8856935705705,
		29,66.0478571428571,13.9930148390443,
		30,67.925,13.037524393369,
		31,69.5657142857143,12.1204713758841,
		32,71.1921428571429,11.4291053412373,
		33,72.7557142857143,11.0769002289142,
		34,74.3371428571429,10.3017820927116,
		35,76.0692857142857,10.0023623857918,
		36,77.1842857142857,9.6977576427081,
		37,78.3985714285714,9.29069415071866,
		38,79.6414285714286,9.06001091622951,
		39,80.7635714285714,8.71464603380456,
		40,81.7807142857143,8.47421107222987,
		41,82.7321428571429,8.24854782424102,
		42,83.7135714285714,8.04848060877891,
		43,84.5378571428571,7.78004170304368,
		44,85.4707142857143,7.72746198187469,
		45,86.365,7.34696038665494,
		46,87.0221428571429,7.20697757899772,
		47,87.87,6.95664485886032,
		48,88.5407142857143,6.8209219592095,
		49,89.0514285714286,6.66266158082934,
		50,89.655,6.6010509070089,
		51,90.3535714285714,6.34661946010855,
		52,90.79,6.21464647178186,
		53,91.3907142857143,6.14548923293239,
		54,91.93,5.8919554022021,
		55,92.41,5.80300982912515,
		56,92.9178571428571,5.71232025951388,
		57,93.3057142857143,5.43648743256118,
		58,93.7692857142857,5.44586570681864,
		59,94.1892857142857,5.24747186643349,
		60,94.5828571428572,5.13953369416006,
		61,94.7742857142857,5.02496339716591,
		62,95.0978571428572,4.94387916607912,
		63,95.3957142857143,4.87142328638816,
		64,95.77,4.59149213219407,
		65,95.9957142857143,4.41351719900739,
		66,96.1064285714286,4.64528148876794,
		67,96.5135714285714,4.32552994911136,
		68,96.69,4.07006331457084,
		69,96.9214285714286,4.0665026688844,
		70,97.0642857142857,3.99482302349065,
		71,97.2885714285714,3.66942430433913,
		72,97.4928571428571,3.57175119421924,
		73,97.545,3.56864281463717,
		74,97.7607142857143,3.28542109298667,
		75,97.8671428571429,3.23525870698139,
		76,97.9978571428571,3.04099472230698,
		77,98.1028571428571,2.8229047466734,
		78,98.1335714285714,2.895852756411,
		79,98.2564285714286,2.69969402010632,
		80,98.3235714285714,2.78023963312201,
		81,98.4192857142857,2.46408811120468,
		82,98.5135714285714,2.41250462619838,
		83,98.5535714285714,2.43991048745916,
		84,98.6507142857143,2.19229231727788,
		85,98.6842857142857,2.21001814919702,
		86,98.735,2.06694404672882,
		87,98.79,1.93136062043158,
		88,98.8,1.92578854977943,
		89,98.8535714285714,1.86727941604421,
		90,98.8864285714286,1.87217523482448,
		91,98.98,1.68291871004377,
		92,98.9907142857143,1.66037745609343,
		93,99.04,1.55342301931028,
		94,99.035,1.56794696731353,
		95,99.1057142857143,1.46974992266196,
		96,99.0785714285714,1.54312797785665,
		97,99.1485714285714,1.40186061604326,
		98,99.1271428571429,1.41503154937065,
		99,99.1564285714286,1.33394502909953,
		100,99.1857142857143,1.32489601499493,
		101,99.2085714285714,1.30069127858912,
		102,99.195,1.32797561377054,
		103,99.1928571428572,1.31139637011868,
		104,99.2392857142857,1.19639499706869,
		105,99.2064285714286,1.3182132846153,
		106,99.2292857142857,1.25990515079945,
		107,99.265,1.19965860528351,
		108,99.2464285714286,1.22938763457421,
		109,99.2592857142857,1.21932808915853,
		110,99.2657142857143,1.23775052964092,
		111,99.2642857142857,1.18427332010111,
		112,99.2757142857143,1.2387010211428,
		113,99.2607142857143,1.21859606663832,
		114,99.3078571428571,1.13916419138992,
		115,99.2714285714286,1.20643694816186,
		116,99.285,1.15038956612365,
		117,99.3185714285714,1.14308527942755,
		118,99.2792857142857,1.18866741344256,
		119,99.2878571428571,1.1977169215536,
		120,99.2864285714286,1.16293135681318,
		121,99.3171428571429,1.11640514131763,
		122,99.2928571428571,1.15065485416201,
		123,99.2892857142857,1.18638730403053,
		124,99.285,1.17488952017429,
		125,99.3078571428571,1.16607282112903,
		126,99.2921428571428,1.18839373539651,
		127,99.2628571428571,1.18739163762379,
		128,99.2435714285714,1.22425869025273,
		129,99.285,1.19640969314284,
		130,99.3035714285714,1.11779733365261,
		131,99.2885714285714,1.19813224609009,
		132,99.2778571428571,1.1851853381283,
		133,99.2864285714286,1.24680272415769,
		134,99.295,1.21631695009028,
		135,99.2535714285714,1.31387042531046,
		136,99.2721428571429,1.23225982881626,
		137,99.2828571428571,1.1985210666704,
		138,99.2807142857143,1.18979936437726,
		139,99.2757142857143,1.19812490863987,
		140,99.29,1.1829233670478,
		141,99.3,1.16502228436924,
		142,99.2878571428571,1.20123768589816,
		143,99.2628571428571,1.24436841299221,
		144,99.2757142857143,1.18695288148146,
		145,99.2864285714286,1.18155443341425,
		146,99.2814285714286,1.18367652248835,
		147,99.2535714285714,1.24621029922325,
		148,99.3207142857143,1.14924365954787,
		149,99.2878571428571,1.18013153485552,
		150,99.2514285714286,1.25544878364338,
		151,99.2864285714286,1.17738045052342,
		152,99.2785714285714,1.19399688920389,
		153,99.2907142857143,1.14997969403955,
		154,99.3,1.15699212150765,
		155,99.3085714285714,1.13603803527101,
		156,99.2842857142857,1.15327436381884,
		157,99.2892857142857,1.16775566652588,
		158,99.2757142857143,1.19502632275942,
		159,99.3057142857143,1.1568638925708,
		160,99.2957142857143,1.21124039591788,
		161,99.2892857142857,1.2045903503216,
		162,99.2621428571428,1.24791012109433,
		163,99.2757142857143,1.21150709884402,
		164,99.2685714285714,1.19432541077095,
		165,99.295,1.18154234274202,
		166,99.29,1.21899706568714,
		167,99.2878571428571,1.22224999690941,
		168,99.2971428571429,1.19811665395466,
		169,99.2971428571429,1.16320134226082,
		170,99.3071428571429,1.12888936959793,
		171,99.2778571428571,1.19604591223574,
		172,99.2964285714286,1.1554793021004,
		173,99.2828571428571,1.21817283459493,
		174,99.2635714285714,1.19900989373513,
		175,99.2914285714286,1.17626434197327,
		176,99.2821428571429,1.17557958583729,
		177,99.3092857142857,1.15881547137726,
		178,99.2964285714286,1.15467349459528,
		179,99.2721428571429,1.18686515708352,
		180,99.3028571428571,1.15471893730718,
		181,99.2914285714286,1.15627290592102,
		182,99.2935714285714,1.17737391709658,
		183,99.25,1.2499292287658,
		184,99.3007142857143,1.18388190864899,
		185,99.3192857142857,1.12637242294227,
		186,99.2478571428571,1.2513572850889,
		187,99.29,1.17616063790362,
		188,99.2792857142857,1.19096253435688,
		189,99.2692857142857,1.21193084523267,
		190,99.255,1.25939393238299,
		191,99.2721428571429,1.22435652532214,
		192,99.2564285714286,1.20242451957482,
		193,99.2821428571429,1.22192898302661,
		194,99.2957142857143,1.16316355279447,
		195,99.2907142857143,1.17693516118195,
		196,99.2585714285714,1.22622533468713,
		197,99.2742857142857,1.19627443652054,
		198,99.2878571428571,1.19637387114582,
		199,99.2857142857143,1.2095753500599};

	@Test
	// remove
	public void testMatrix() {
		Integer[] steps = new Integer[MATRIX.length / 3];
		Double[] avgs = new Double[MATRIX.length / 3];
		Double[] stds = new Double[MATRIX.length / 3];

		int order = 0;
		int index = 0;
		for (double value : MATRIX) {
			switch (order) {
				case 0: steps[index] = (int) value; break;
				case 1: avgs[index] = value; break;
				case 2: stds[index] = value; break;
			}
			order++;
			if (order > 2) {
				order = 0;
				index++;
			}
		}
		System.out.println(StringUtils.join(steps, ','));
		System.out.println(StringUtils.join(avgs, ','));
		System.out.println(StringUtils.join(stds, ','));
	}

	@Test
	public void testCreateRandomInstance() {
		ReflectionProvider<User> reflectionProvider = new SpringReflectionProviderImpl(User.class);
		User user = reflectionProvider.createRandomInstance();
		assertNotNull(user);
	}
}